#!/bin/bash
#
# Javier Cerezo. Jul 2019
#
##################################################################################
# DESCRIPTION
#
# Script to set to Gaussian jobs, submit them and substract their energies, 
# gradients and Hessians, which are then feeded to the main Gaussian caller
# job.
#
# This script is based on gromacs_link.sh
#
##################################################################################

#========================================
# GAUSSIAN CONFIGURATION SECTION
#========================================
# Set the Gaussian binary
gau=g16
#========================================
# END OF GAUSSIAN CONFIGURATION SECTION
#========================================

# Defaults 
save_intermediate='false'

##################################################################################
# INPUT DATA:
# First commands are given after the program name in External
# and must be two
#  * job1 route section file name
#  * job2 route section file name
#  * (Optionally) -debug flag to save intermediate files
# Last commands are appended by gaussian in this order:
#  * layer to be calculated (R, M or S)
#  * input file name
#  * output file name
#  * message file name
#  * another file
#  * another file
#
# Now read input except the arguments appended by gaussian
# This should work fine even if we use a wrong number of 
# arguments
(( nopts = $# - 6 ))
(( i=0 ))
(( k=0 ))
while (( i<nopts )); do
    case $1 in
     -debug     ) save_intermediate=true     ;;
     *          ) jobfile=$1; (( k++ ))      ;;
    esac
    shift; (( i++ ))
    if (( k==1 )); then
        job1_rs=$jobfile
    elif (( k==2 )); then
        job2_rs=$jobfile
    fi
done
# Take gaussian args
layer=$1 ; shift
input=$1 ; shift
output=$1; shift
msg=$1   ; shift

# Check that we got the right number of arguments
if (( k != 2 )); then
    echo "gauSgau: ERROR incorrect number of job file names." > $msg
    echo "gauSgau:       Expected 2, got $k.                " >> $msg
    exit
fi

##################################################################################
# We use the gaussian ID to identify the generated files, adding
# "_tmp" to differenciate from files generated by Gaussian
label=${input##/*/}
label=${label%.*}_tmp


######################################################################################
#   S U B S    C A L C S    R U N S
######################################################################################
# ** JOB1 run **
#---------------
# 1. Prepare gau input
gau2gau-in $input $job1_rs job1_${label}

# 2. Run gaussian
${gau}<job1_${label}.com>job1_${label}.log
formchk job1_${label}.chk job1_${label}.fchk
rm job1_${label}.chk

# ** JOB2 run **
#---------------
# 1. Prepare gau input
gau2gau-in $input $job2_rs job2_${label}

# 2. Run gaussian
${gau}<job2_${label}.com>job2_${label}.log
formchk job2_${label}.chk job2_${label}.fchk
rm job2_${label}.chk

########################################################################################
#  U P D A T E    G A U S S I A N
########################################################################################
# Substract data and write into proper format for Gaussian
gau2gau-out job1_${label}.fchk job2_${label}.fchk $output $msg 

# Remove or save intermediate files
if $save_intermediate; then
    echo "Keeping all intermediate files from substraction run" >> $msg
else
    rm *${label}* 2>/dev/null
fi
